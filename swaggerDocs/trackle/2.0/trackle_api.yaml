---
swagger: '2.0'
info:
  version: 2.0.0
  title: trackle REST API
  description: |-
    This is the definition of the trackle REST API containing the following parts:|
    - getting data (from device and user input) for one day, a range or days or a cycle
    - endpoints to create and update userinput
    - registration and login of trackle user accounts (including deletion of accounts)
    - read cycle statistics of user
    - getting trackle RAW data of sleeping periods
basePath: "/api/trackleService/v2"
produces:
  - application/json
paths:
  "/":
    get:
      tags:
        - trackle
        - health
      summary: health monitor
      description: allows a quick check if the service is still up.
      responses:
        '200':
          description: everything is fine
          schema:
            "$ref": "#/definitions/HealthResponse200"
  "/check":
    get:
      tags:
        - trackle
        - health
      summary: health monitor
      description: allows a quick check if the service is still up.
      responses:
        '200':
          description: everything is fine
          schema:
            "$ref": "#/definitions/HealthResponse200"
  "/deepCheck":
    get:
      tags:
        - trackle
        - health
      summary: health monitor deep check
      description: allows a deep check of the service
      responses:
        '200':
          description: everything is fine
          schema:
            "$ref": "#/definitions/DeepCheckHealthResponse200"
        '500':
          description: something is not fine
          schema:
            "$ref": "#/definitions/DeepCheckHealthResponse500"
  "/device/claim/:hardwareDeviceId":
    post:
      tags:
        - trackle
        - sensor
      summary: CLAIM sensor
      description: 'prerequisition: trackle sensor and app already performed a handshake
        with the ubrich-trackle-key app found a trackle sensor and want to claim it;
        afterwards app and sensor can communicate trust worthy'
      parameters:
        - in: header
          name: Authorization
          description: ubirch token identifying the related user
          required: true
          type: string
        - in: path
          name: hardwareDeviceId
          description: the `hardwareDeviceId `of the device to claim
          required: true
          type: string
      responses:
        '202':
          description: device claimed successfully
          schema:
            "$ref": "#/definitions/ClaimSuccess"
        '400':
          description: device claiming failed
          schema:
            "$ref": "#/definitions/ClaimErrorResponse"
        '500':
          description: the backend has a problem
          schema:
            "$ref": "#/definitions/ServerError"
  "/device/statistics/:hardwareDeviceId":
    get:
      tags:
        - trackle
        - sensor
      summary: GET sensor statistic
      description: 'the sensor statistics gives information about the date of deactivation of the device and when the user has to become informed about this; the device has to become claimed before the statistics can be retrieved.'
      parameters:
        - in: header
          name: Authorization
          description: ubirch token identifying the related user
          required: true
          type: string
        - in: path
          name: hardwareDeviceId
          description: the `hardwareDeviceId` of the device to retrieve the statistics for
          required: true
          type: string
      responses:
        '202':
          description: device statistic retrieved successfully
          schema:
            "$ref": "#/definitions/DeviceStatisticSuccess"
        '400':
          description: retrieving device statistic failed
          schema:
            "$ref": "#/definitions/TrackleError"
        '500':
          description: the backend has a problem
          schema:
            "$ref": "#/definitions/ServerError"
  "/device/statistic/create/:deviceId":
    get:
      tags:
        - trackle
        - sensor
      summary: GET sensor statistic for admins only
      description: this endpoint expects the deviceId and not hwDeviceId and serves
        mostly the endpoints statistics/createAll and statistics/recreateAll and is
        for admins only.
      parameters:
        - in: header
          name: Authorization
          description: ubirch token identifying the admin user
          required: true
          type: string
        - in: path
          name: deviceId
          description: the `deviceId` of the device to retrieve the statistic for
          required: true
          type: string
      responses:
        '200':
          description: device statistic retrieved successfully
          schema:
            "$ref": "#/definitions/DeviceStatisticSuccess"
        '400':
          description: retrieving device statistic failed
          schema:
            "$ref": "#/definitions/TrackleError"
        '500':
          description: the backend has a problem
          schema:
            "$ref": "#/definitions/ServerError"
  "/device/statistic/createAll/:delaySeconds":
    get:
      tags:
        - trackle
        - sensor
      summary: GET sensor statistic for admins only
      description: this endpoint creates all non-existing device statistics by calling
        /statistic/createAll - for admin user only.
      parameters:
        - in: header
          name: Authorization
          description: Ubirch token identifying the admin user
          required: true
          type: string
        - in: path
          name: delaySeconds
          description: the number of delay seconds with which the create Endpoint is
            called for each deviceId
          required: false
          type: string
      responses:
        '200':
          description: generating all missing deviceStatistics successfully
          schema:
            "$ref": "#/definitions/CreateAllDeviceStatsResponse"
        '400':
          description: retrieving all missing deviceStatistics failed
          schema:
            "$ref": "#/definitions/CreateAllDeviceStatsResponse"
        '500':
          description: the backend has a problem
          schema:
            "$ref": "#/definitions/ServerError"
  "/userInput":
    post:
      tags:
        - trackle
        - user input
      summary: CREATE user input
      description: user set properties and inserted data for a day
      parameters:
        - in: header
          name: Authorization
          description: Bearer or ubirch token identifying the related user
          required: true
          type: string
        - in: body
          name: userInputSigned
          description: the data the user inserted and uploaded for one day, signed by
            the app
          schema:
            "$ref": "#/definitions/UserInputSigned"
      responses:
        '200':
          description: Successful response; returns the user input signed by the app,
            wrapped in an object documenting that the server accepted and signed that
            content sent by the app
          schema:
            "$ref": "#/definitions/UserInputAcceptedSigned"
        '400':
          description: Not successful response
          schema:
            "$ref": "#/definitions/ErrorResponse"
    put:
      tags:
        - trackle
        - user input
      summary: CREATE or UPDATE user input
      description: user set properties and inserted data or update existing data for
        a day; !!important!! properties that had already been set in an earlier operation
        will be deleted by an update call when they are missing in the userInput object!!
      parameters:
        - in: header
          name: Authorization
          description: Bearer or ubirch token identifying the related user
          required: true
          type: string
        - in: body
          name: userInputSigned
          description: the updated data the user inserted and uploaded for one day,
            signed by the app
          schema:
            "$ref": "#/definitions/UserInputSigned"
      responses:
        '200':
          description: Successful response; returns the user input signed by the app,
            wrapped in an object documenting that the server accepted and signed that
            content sent by the app
          schema:
            "$ref": "#/definitions/UserInputAcceptedSigned"
        '400':
          description: Not successful response
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/user":
    delete:
      tags:
        - trackle
        - user
      summary: delete user in non-production environments
      description: |-
        allows us to delete users in non-production environments including:
        - trackle-service: userDevices
        - avatar-service: deleted from device owner lists
        - user-service: user record
        - key-service: public key
      parameters:
        - in: header
          name: Authorization
          description: Bearer token identifying the related user
          required: true
          type: string
        - in: body
          name: publicKeyToDelete
          description: signed public key delete request (forwarded to key-service)
          required: true
          schema:
            "$ref": "#/definitions/DeletePublicKey"
      responses:
        '200':
          description: successfully deleted user information
        '400':
          description: user deletion failed
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/user/register":
    post:
      tags:
        - trackle
        - user
      summary: register a user
      description: register a user and store their public and private key (private
        can only be decrypted on user's device)
      parameters:
        - in: body
          name: register
          description: all information needed to register a user
          schema:
            "$ref": "#/definitions/RegistrationObject"
      responses:
        '200':
          description: success
        '400':
          description: failed
          schema:
            "$ref": "#/definitions/RegistrationError"
  "/user/login/:hashedSecret":
    get:
      tags:
        - trackle
        - user
      summary: login a user
      description: login a user. registered users could get their encrypted secret
        key.
      parameters:
        - in: path
          name: hashedSecret
          description: hashed authorization secret which is derived from user passphrase
          required: true
          type: string
      responses:
        '202':
          description: success
          schema:
            "$ref": "#/definitions/LoginSuccessful"
        '400':
          description: failed
          schema:
            "$ref": "#/definitions/LoginError"
        '500':
          description: failed
          schema:
            "$ref": "#/definitions/LoginError"
  "/cycle":
    get:
      tags:
        - trackle
        - cycle
      summary: GET a cycle overview
      description: returns a reduced overview (begin, end, cycleId) over all cycles
        for one user
      parameters:
        - in: header
          name: Authorization
          description: Bearer or ubirch token identifying the related user
          required: true
          type: string
      responses:
        '200':
          description: Successful response; returns the requested reduced cycle overview
          schema:
            "$ref": "#/definitions/ReducedCycleObject"
        '400':
          description: Not successful response
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/cycle/id/{cycleId}":
    get:
      tags:
        - trackle
        - cycle
      summary: GET cycle data
      description: returns cycle related information
      parameters:
        - in: path
          name: cycleId
          description: id of the cycle
          required: true
          type: string
        - in: header
          name: Authorization
          description: Bearer or ubirch token identifying the related user
          required: true
          type: string
      responses:
        '200':
          description: Successful response; returns the requested cycle data
          schema:
            "$ref": "#/definitions/CycleObject"
        '400':
          description: Not successful response
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/day/{day}":
    get:
      tags:
        - trackle
        - day
      parameters:
        - in: header
          name: Authorization
          description: Bearer or ubirch token identifying the related user
          required: true
          type: string
        - in: path
          name: day
          description: date of the day the user requests data for
          required: true
          type: string
          format: date
      summary: data for a day
      description: Query all available data for one day, that the authenticated user
        has inserted for that day or that have been measured by the user's device
        or that have been aggregated from known information in the backend
      responses:
        '200':
          description: Successful response; returns an trackle day info object
          schema:
            "$ref": "#/definitions/DayInfoObject"
        '400':
          description: Not successful response
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/day/lastupdated":
    get:
      tags:
        - trackle
        - day
      parameters:
        - in: header
          name: Authorization
          description: Bearer or ubirch token identifying the related user
          required: true
          type: string
      description: tells us when any day of a user has been last updated
      responses:
        '202':
          description: successful response; returns last updated information
          schema:
            "$ref": "#/definitions/LastUpdated"
        '400':
          description: Not successful response
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/day/from/{fromDay}/until/{untilDay}":
    get:
      tags:
        - trackle
        - day
      parameters:
        - in: header
          name: Authorization
          description: Bearer or ubirch token identifying the related user
          required: true
          type: string
        - in: path
          name: fromDay
          description: first day from date range the user requests data for
          required: true
          type: string
          format: date
        - in: path
          name: untilDay
          description: last day from date range the user requests data for
          required: true
          type: string
          format: date
      summary: data for a day
      description: Query all available data for a range of days, that the authenticated
        user has inserted for that days or that have been measured by the user's device
        or that have been aggregated from known information in the backend
      responses:
        '200':
          description: Successful response; returns an array of trackle day info objects
          schema:
            type: array
            items:
              "$ref": "#/definitions/DayInfoObject"
        '400':
          description: Not successful response
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/export/cycleDays/:cycleId":
    get:
      tags:
        - trackle
        - export
      summary: GET a .csv file with all days of a cycle by it's id
      description: this endpoint exports all days combined with ovulationStatistics
        to a .csv file.
      parameters:
        - in: header
          name: Authorization
          description: ubirch token identifying the admin user
          required: true
          type: string
        - in: path
          name: cycleId
          description: the `cycleId` of the cycle to retrieve all days for
          required: true
          type: string
      responses:
        '200':
          description: cycleDay export retrieved successfully
          content:
            text/csv: {}
        '400':
          description: retrieving cycleDay export failed
          schema:
            "$ref": "#/definitions/TrackleError"
        '500':
          description: the backend has a problem
          schema:
            "$ref": "#/definitions/ServerError"
  "/export/temperatures/:cycleId":
    get:
      tags:
        - trackle
        - export
      summary: GET a .csv file with all temperatures of a cycle by cycleId
      description: this endpoint exports all temperatures of a cycle marking which
        has been included in the evaluation to a .csv file.
      parameters:
        - in: header
          name: Authorization
          description: ubirch token identifying the admin user
          required: true
          type: string
        - in: path
          name: cycleId
          description: the `cycleId` of the cycle to retrieve all temperatures for
          required: true
          type: string
      responses:
        '200':
          description: cycleTemperatures export retrieved successfully
          content:
            text/csv: {}
        '400':
          description: retrieving cycleTemperatures export failed
          schema:
            "$ref": "#/definitions/TrackleError"
        '500':
          description: the backend has a problem
          schema:
            "$ref": "#/definitions/ServerError"
  "/sleepingPeriod/{sleepingPeriodId}":
    get:
      tags:
        - trackle
        - sleepingPeriod
      summary: sleeping period temperature curve
      description: return the data that has been measured during the sleeping period
      parameters:
        - in: path
          name: sleepingPeriodId
          description: id of the sleeping period curve; UUID
          required: true
          type: string
        - in: header
          name: Authorization
          description: Bearer token identifying the related user
          required: true
          type: string
      responses:
        '200':
          description: Successful response; returns the requested sleeping period
            temperature curve
          schema:
            "$ref": "#/definitions/SleepingPeriodObject"
        '400':
          description: Not successful response
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/user/check/{hashedEmail}":
    get:
      tags:
        - trackle
        - user
      summary: CHECK if user exists
      description: check existence of user by hashed email address
      parameters:
        - in: path
          name: hashedEmail
          description: hashed email address (SHA-512(email_toLower_trim))
          required: true
          type: string
      responses:
        '200':
          description: Successful response; returns if user for given email address
            already exists or not
          schema:
            "$ref": "#/definitions/CheckEmailExists"
        '400':
          description: Not successful response; especially if user already exists
          schema:
            "$ref": "#/definitions/CheckEmailError"
  "/user/info":
    get:
      tags:
        - trackle
        - user
        - 2BImplemented
      summary: READ user info
      description: returns user info account data
      parameters:
        - in: header
          name: Authorization
          description: Bearer or ubirch token identifying the related user
          required: true
          type: string
      responses:
        '200':
          description: Successful response; returns the requested user info
          schema:
            "$ref": "#/definitions/UserInfoAcceptedSigned"
        '400':
          description: Not successful response; especially if user doesn't exist
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/user/settings":
    post:
      tags:
        - trackle
        - user
        - 2BImplemented
      summary: CREATE user settings
      description: set user specific settings
      parameters:
        - in: header
          name: Authorization
          description: Bearer or ubirch token identifying the related user
          required: true
          type: string
        - in: body
          name: userSettingsSigned
          description: user settings the user inserted initially, signed by the app
          schema:
            "$ref": "#/definitions/UserSettingsSigned"
      responses:
        '200':
          description: Successful response; returns the user settings signed by the
            app, wrapped in an object documenting that the server accepted and signed
            that content sent by the app
          schema:
            "$ref": "#/definitions/UserSettingsAcceptedSigned"
        '400':
          description: Not successful response
          schema:
            "$ref": "#/definitions/ErrorResponse"
    put:
      tags:
        - trackle
        - user
        - 2BImplemented
      summary: UPDATE user settings
      description: update user specific settings
      parameters:
        - in: header
          name: Authorization
          description: Bearer token identifying the related user
          required: true
          type: string
        - in: body
          name: userSettingsSigned
          description: user settings the user changed, signed by the app
          schema:
            "$ref": "#/definitions/UserSettingsSigned"
      responses:
        '200':
          description: Successful response; returns the user settings signed by the
            app, wrapped in an object documenting that the server accepted and signed
            that content sent by the app
          schema:
            "$ref": "#/definitions/UserSettingsAcceptedSigned"
        '400':
          description: Not successful response
          schema:
            "$ref": "#/definitions/ErrorResponse"
    get:
      tags:
        - trackle
        - user
        - 2BImplemented
      summary: READ user settings
      description: returns user specific settings
      parameters:
        - in: header
          name: Authorization
          description: Bearer token identifying the related user
          required: true
          type: string
      responses:
        '200':
          description: Successful response; returns the user settings signed by the
            app, wrapped in an object documenting that the server accepted and signed
            that content sent by the app
          schema:
            "$ref": "#/definitions/UserSettingsAcceptedSigned"
        '400':
          description: Not successful response
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/userUpdate/password":
    put:
      tags:
        - trackle
        - user update
      summary: UPDATE user password
      description: this endpoint is used for updating a user's password
      parameters:
        - in: header
          name: Authorization
          description: Bearer or ubirch token identifying the admin user authorized to change customer's passwords
          required: true
          type: string
        - in: body
          name: info
          description: the externalId of the user who wants to change her password and the externalId
            of the temporary user generated to enter a new password via the app.
          schema:
            "$ref": "#/definitions/UserUpdatePassword"
      responses:
        '200':
          description: Successful response; returns the user id of the user whose password was changed.
          schema:
            "$ref": "#/definitions/UbirchJsonResponse"
        '400':
          description: Not successful response.
          schema:
            "$ref": "#/definitions/TrackleError"
  "/userUpdate/email":
    put:
      tags:
        - trackle
        - user update
      summary: UPDATE user email
      description: this endpoint is used for updating a user's email adress
      parameters:
        - in: header
          name: Authorization
          description: Bearer or ubirch token identifying the admin user authorized to change customer's passwords
          required: true
          type: string
        - in: body
          name: info
          description: the externalId of the user who wants to change her email adress and the new email adress in
            form of the externalId.
          schema:
            "$ref": "#/definitions/UserUpdateEmail"
      responses:
        '200':
          description: Successful response; returns the user id of the user whose password was changed.
          schema:
            "$ref": "#/definitions/UbirchJsonResponse"
        '400':
          description: Not successful response
          schema:
            "$ref": "#/definitions/TrackleError"
  "/cycle/stats":
    get:
      tags:
        - trackle
        - cycle
        - 2BImplemented
      summary: READ user cycle statistics
      description: return statistics about users cycles analysed from collected measured
        temperatures and user inputs
      parameters:
        - in: header
          name: Authorization
          description: Bearer token identifying the related user
          required: true
          type: string
      responses:
        '200':
          description: Successful response; returns the requested user cycle statistics
          schema:
            "$ref": "#/definitions/CycleStatsSigned"
        '400':
          description: Not successful response
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/user/profile":
    get:
      tags:
        - trackle
        - user
        - 2BImplemented
      summary: READ user profile
      description: returns user profile containing user info, user settings and cycle
        statistics
      parameters:
        - in: header
          name: Authorization
          description: Bearer token identifying the related user
          required: true
          type: string
      responses:
        '200':
          description: Successful response; returns the requested user profile
          schema:
            "$ref": "#/definitions/UserProfile"
        '400':
          description: Not successful response; especially if user doesn't exist
          schema:
            "$ref": "#/definitions/ErrorResponse"
definitions:
  SignedObject:
    type: object
    discriminator: SignedObject
    description: the additional contained property/object is signed by the signature
    required:
      - signature
      - signatureCreated
    properties:
      signature:
        type: string
        description: signature the payload has been signed with
      signatureCreated:
        type: string
        format: date-time
        description: the timestamp when this signature was created
  AcceptedSignedObject:
    allOf:
      - "$ref": "#/definitions/SignedObject"
      - type: object
        discriminator: AcceptedSignedObject
        description: the additional contained property/object is signed by the app,
          that has been accepted and signed by server afterwards
        required:
          - acceptedDate
        properties:
          acceptedDate:
            type: string
            format: date-time
            description: timestamp when server accepted the created or last updated
              signed data
          created:
            type: string
            format: date-time
            description: timestamp of creation date
          lastUpdated:
            type: string
            format: date-time
            description: timestamp when this data has been last updated
  ErrorResponseObject:
    discriminator: ErrorResponseObject
    type: object
    description: error object with error code and message
    required:
      - apiVersion
      - status
      - error
    properties:
      apiVersion:
        type: string
      status:
        type: string
        description: KO because it's an error
      error:
        type: object
        required:
          - errorId
          - errorMessage
        properties:
          errorId:
            type: string
          errorMessage:
            type: string
  ClaimSuccess:
    description: possible errors for claiming request
    allOf:
      - "$ref": "#/definitions/UbirchJsonResponse"
    example:
      version: '1.0'
      status: OK
      message: 'device 12341234 claimed for user: Jane Smith'
  DeviceStatisticSuccess:
    description: created or existing device statistic
    properties:
      hwDeviceId:
        type: string
        format: uuid
        description: 'id of the device for which the statistic is requested'
      lifetime:
        type: object
        description: 'object containing statistics regarding the lifetime of the sensor'
        properties:
          amount:
            type: integer
            description: 'how many days since production date have passed'
          max:
            type: integer
            description: 'the maximum of days that may pass since production date before the device has to become deactivated'
          deactivatedAt:
            type: string
            format: date-time
            description: 'the date, when the sensor has to become or became deactivated'
          notifyUser:
            type: boolean
            description: 'informs the app, if the user has to become notified about the approaching end of life of the sensor'
      usageDays:
        type: object
        description: 'object containing statistics regarding the max usageDays of the sensor'
        properties:
          amount:
            type: integer
            description: 'how many days the device has been used already (that means measured temperature or transferred data)'
          max:
            type: integer
            description: 'the maximum of days that the device can be used before it has to become deactivated'
          deactivatedAt:
            type: string
            format: date-time
            description: 'the date, when the sensor has to become or became deactivated'
          notifyUser:
            type: boolean
            description: 'informs the app, if the user has to become notified about the approaching end of life of the sensor'
  CreateAllDeviceStatsResponse:
    type: object
    description: preliminary result of the createAll request
    properties:
      amountDevicesWithoutStatistics:
        type: integer
        description: the number of devices for which the statistics shall get generated
      errorMsg:
        type: string
        description: error message if any error appears like no admin user sending
          request
  ClaimErrorResponse:
    description: possible errors for claiming request
    allOf:
      - "$ref": "#/definitions/TrackleError"
    example:
      version: '1.0'
      status: NOK
      errorType: ValidationError
      errorMessage: device 12341234 does not exist
  RegistrationError:
    allOf:
      - "$ref": "#/definitions/TrackleError"
    example:
      version: '1.0'
      status: NOK
      errorType: RegistrationError
      errorMessage: failed to create user record
  LoginError:
    allOf:
      - "$ref": "#/definitions/TrackleError"
    example:
      version: '1.0'
      status: NOK
      errorType: LoginError
      errorMessage: failed to login user
  LoginSuccessful:
    type: object
    description: Set of all encrypted private keys for user that just logged in. This
      can be used to transfer key pairs to another/new device for example.
    required:
      - encryptedPrivateKeys
    properties:
      encryptedPrivateKeys:
        type: array
        items:
          type: string
          description: A single encrypted private key. Only the user has the password
            to decrypt it while our server never had it.
    example:
      encryptedPrivateKey:
        - 06bb7aab-275a-4812-adbb-31226754c5d3
  ReducedCycleObject:
    type: object
    description: a reduced version of the cycle object.
    required:
      - cycleDounter
      - cycleBegin
    properties:
      cycleId:
        type: string
        description: UUID of the cycle
      cycleCounter:
        type: integer
        description: running counter of all cycles
      cycleBegin:
        type: string
        format: date-time
        description: first day in this cycle
      cycleEnd:
        type: string
        format: date-time
        description: last day in this cycle
  CycleObject:
    type: object
    description: all available data for one cycle.
    required:
      - cycleCounter
      - cycleBegin
      - created
      - lastUpdated
    properties:
      cycleCounter:
        type: integer
        description: running counter of all cycles
      cycle1:
        type: boolean
        description: If true this cycle is being treated as the first one meaning
          that this one is being handled a bit different from all the other ones.
          Amongst other thing we're looking for an extra dragon.
      cycleBegin:
        type: string
        format: date-time
        description: first day in this cycle
      cycleEnd:
        type: string
        format: date-time
        description: last day in this cycle
      cycleLength:
        type: integer
        description: number of days the cycle lasted
      menstruationLength:
        type: integer
        description: number of days menstruation lasted
      ovulationIndex:
        type: integer
        description: if set this is the index (as in array index; start counting with
          zero) of the ovulation day (e.g. if set to 14 then ovulation was detected
          on day 15).
      postOvulationLength:
        type: integer
        description: if set we know how many days long the post-ovulation phase has
          been.
      ovulationAnalysisStats:
        "$ref": "#/definitions/OvulationAnalysisStats"
        description: the detailed information about the ovulation if found.
      aggregatedSigned:
        "$ref": "#/definitions/CycleAggregatedSigned"
        description: aggregated information if available
      created:
        type: string
        format: date-time
        description: cycle's creation date
      lastUpdated:
        type: string
        format: date-time
        description: cycle's last modified date
  OvulationAnalysisStats:
    type: object
    description: detailed information about the ovulation, if any was found
    properties:
      temperatureHigherValues:
        type: array
        items:
          type: string
          format: date-time
          description: An array of 0-5 days, that represent the days with the highest
            basal temperatures that have a chronological order.
      temperatureAidLine:
        "$ref": "#/definitions/TemperatureAidLine"
        description: The data needed for the temperature aid line.
      cervicalMucusAnalysis:
        type: array
        items:
          type: string
          format: date-time
          description: An array of four days (H, 1, 2, 3) that represent the days
            with the mucuspeaks related to the temperature shift of the ovulation.
  TemperatureAidLine:
    type: object
    description: The data needed for the temperature aid line.
    required:
      - begin
      - end
      - temperature
    properties:
      begin:
        type: string
        format: date-time
        description: The beginning of the baseline days used to analyse for the temperature
          shift.
      end:
        type: string
        format: date-time
        description: The end of the baseline days used to analyse for the temperature
          shift.
      temperature:
        type: number
        format: float
        description: The temperature peak of the baseline.
  CycleAggregatedSigned:
    type: object
    description: aggregated information in relation to a cycle (signed by backend)
    required:
      - aggregated
      - signature
      - signatureCreated
    properties:
      aggregated:
        "$ref": "#/definitions/CycleAggregated"
      signature:
        type: string
        description: signature of `baseline` field as created by backend
      signatureCreated:
        type: string
        format: date-time
        description: time the signature had been created
  CycleAggregated:
    type: object
    description: aggregated information in relation to a cycle
    required:
      - baseline
      - created
      - lastUpdated
    properties:
      baseline:
        "$ref": "#/definitions/NfpBaseline"
      created:
        type: string
        format: date-time
        description: creation date of this `CycleAggregated`
      lastUpdated:
        type: string
        format: date-time
        description: last updated date of this `CycleAggregated`
  NfpBaseline:
    type: object
    description: NFP charts typically include a baseline. This object provides all
      relevant information about it.
    required:
      - temperature
      - begin
      - end
    properties:
      temperature:
        type: number
        format: float
        description: baseline should be drawn at this temperature
      begin:
        type: string
        format: date-time
        description: baseline's first day
      end:
        type: string
        format: date-time
        description: baseline's last day
    example:
      temperature: 36.35
      begin: '2018-03-01T00:00:00.000Z'
      end: '2018-03-01T00:00:00.000Z'
  LastUpdated:
    type: object
    description: tells us when most recent last updated of any of a user's days
    properties:
      lastUpdated:
        type: string
        format: date-time
    example:
      lastUpdated: 2018-08-271T11:03:42.230Z
  DayInfoObject:
    type: object
    description: all available data for one day. From user input the authenticated
      user inserted or that have been measured by the user's device or that have been
      aggregated from known information in the backend
    properties:
      date:
        type: string
        format: date-time
        description: the day this data is about
      aggregatedSigned:
        description: aggregated data of this day signed by server
        allOf:
          - "$ref": "#/definitions/SignedObject"
          - type: object
            properties:
              aggregated:
                type: object
                description: the measured data and/or aggregated information for this
                  day
                properties:
                  date:
                    type: string
                    format: date-time
                    description: the day this data is about
                  instantTime:
                    type: object
                    description: values at the given instant time (defined by NFP as
                      the best instant time to measure the temperature every day, adjusted
                      by the user)
                    properties:
                      temperature:
                        type: number
                        format: float
                        description: temperature measured at given instant time
                      timestamp:
                        type: string
                        format: date-time
                        description: the real timestamp when the instant time temperature
                          is measured; it is the nearest measured value round about
                          the instantTime.desiredTime
                      desiredTime:
                        type: string
                        description: instant time (given by NFP and adjusted by the
                          user) when the temperature is and will be measured every day;
                          in full-time format (e.g. 06:00:00.000Z)
                  basal:
                    type: object
                    description: lowest measured values of the whole sleeping period
                      of that day
                    properties:
                      temperature:
                        type: number
                        format: double
                        description: lowest measured temperature of the whole sleeping
                          period of that day
                      sleepingPeriodId:
                        type: string
                        description: UUID of the sleeping period during which this basal
                          temperature is measured (for drilldown to sleeping period
                          temperature)
                      timestamp:
                        type: string
                        format: date-time
                        description: the timestamp when the basal temperature is measured
                          the first time during the sleeping period
                  cycle:
                    type: object
                    description: user's cycle during the given date
                    properties:
                      id:
                        type: string
                        description: UUID of the cycle
                      counter:
                        type: integer
                        format: int32
                        description: the number of the cycle; all cycles measured with
                          trackle are numbered consecutively
                  sleepingPeriodIds:
                    type: array
                    items:
                      type: string
                      description: UUIDs of all sleeping periods measured during this
                        day; if the user sleeps several time during one day and always
                        uses the device or removes the device temporarily during the
                        night, several sleeping periods are generated
                  cycleDayCounter:
                    type: integer
                    format: int32
                    description: number of the day inside the cycle (every cycle starts
                      with day number 1)
                  fertile:
                    type: object
                    description: fertile state of the day, if the user is fertile or
                      not
                    properties:
                      state:
                        type: boolean
                        description: true if the user is fertile at that day
                      ovulation:
                        type: boolean
                        description: true if the ovulation probably happened at this
                          day
                      prognosis:
                        type: boolean
                        description: true if the fertility of this day is a prognosis;
                          this is the case if the ovulation of this cycle has not yet
                          been measured
                      partialFertileTime:
                        type: string
                        description: defines the time when fertility ends this day and
                          is only set if it applies
                  dragon:
                    type: boolean
                    description: if set to true this day should be marked as a dragon
                      in basal body temperature curve
                    default: false
                  menstruation:
                    type: object
                    description: menstruation state of the day; menstruation is aggregated
                      by backend from bleedingIntensity inserted by user; if bleeding
                      implies menstruation, intermenstrual bleeding or even ovulation
                      depends on intensitiy and moment of bleeding during user's cycle
                    properties:
                      state:
                        type: boolean
                        description: true if this day is during the menstruation of
                          the user
                      prognosis:
                        type: boolean
                        description: true if the menstruation state of this day is a
                          prognosis; this is the case if this menstruation is in the
                          future or (maybe) user has not inserted bleeding at a day
                          the backend expects user's menstruation
                  nfpIgnore:
                    type: boolean
                    description: if set to true this day should be marked as to be ignored
                      in basal body temperature curve
                    default: false
                  created:
                    type: string
                    format: date-time
                    description: timestamp of creation date
                  lastUpdated:
                    type: string
                    format: date-time
                    description: timestamp when this data has been updated last
      userInputAcceptedSigned:
        "$ref": "#/definitions/UserInputAcceptedSigned"
    example:
      date: '2017-09-20T22:00:00.000Z'
      aggregatedSigned:
        aggregated:
          date: '2017-09-20T00:00:00.000Z'
          instantTime:
            temperature: 36.81
            timestamp: '2017-09-20T05:58:00.000Z'
            desiredTime: 06:00:00.000Z
          basal:
            temperature: 36.62
            sleepingPeriodId: 4a904a91-cabf-417e-981c-5be70654ae98
            timestamp: '2017-08-20T04:34:17.000Z'
          cycle:
            id: eb74fad9-cec2-4c9b-b5e4-64b102bab987
            counter: 3
          sleepingPeriodIds:
            - b3c5ecf8-3e13-4912-a4e8-ae42f1ad1315
            - 4a904a91-cabf-417e-981c-5be70654ae98
          cycleDayCounter: 14
          dragon: true
          fertile:
            state: true
            ovulation: false
            prognosis: false
            partialFertileTime: 18:00:00.000Z
          menstruation:
            state: false
            prognosis: true
          intermenstrualBleeding:
            state: false
          created: '2017-09-20T08:20:00.000Z'
          lastUpdated: '2017-09-20T12:29:22.717Z'
        signature: a server side signature :)
        signatureCreated: '2017-09-20T08:22:00.000Z'
      userInputAcceptedSigned:
        userInputAccepted:
          acceptedDate: '2017-09-20T12:29:22.717Z'
          userInputSigned:
            userInput:
              date: '2017-09-20T22:00:00.000Z'
              payload:
                bleedingIntensity: 0.2
                cervicalMucus: s+
                disturbingFactors:
                  - sleepLately
                  - alcohol
                  - emotionalPressure
            signature: a client side signature :)
            signatureCreated: '2017-09-20T08:22:00.000Z'
          created: '2017-09-20T08:20:00.000Z'
          lastUpdated: '2017-09-20T08:22:03.500Z'
        signature: another server side signature :)
        signatureCreated: 2017-19-19T08:22:03.000Z
  UserInputAcceptedSigned:
    description: current state of the user input for that day, signed by the app,
      accepted and signed by the server
    allOf:
      - "$ref": "#/definitions/AcceptedSignedObject"
      - type: object
        properties:
          userInputSigned:
            "$ref": "#/definitions/UserInputSigned"
  UserInputSigned:
    description: current state of the user input for that day signed by the app
    allOf:
      - "$ref": "#/definitions/SignedObject"
      - type: object
        properties:
          userInput:
            "$ref": "#/definitions/UserInput"
  RegistrationObject:
    description: all information required to register a user
    type: object
    properties:
      displayName:
        type: string
        description: user's display name
      encryptedPrivateKey:
        type: string
        description: "(BASE64 encoded) encrypted private key to enable crypto operations
          on multiple devices; can only be decrypted on device by user's passphrase"
      hashedSecret:
        type: string
        description: SHA512( lower(trim(passphrase)) + lower(trim(email)) )
      publicKey:
        type: object
        description: public key JSON as accepted by ubirch-key-service
      locale:
        type: string
        description: ISO 639 language code
  DeletePublicKey:
    description: a public key to delete
    type: object
    required:
      - publicKey
      - signature
    properties:
      publicKey:
        type: string
        description: 'Base 64 encoded public key as used in _PublicKeyInfo_ (see endpoint:
          PUT /pubKey)'
      signature:
        type: string
        description: Base64 encoded signature of input field _publicKey_
    example:
      publicKey: MC0wCAYDK2VkCgEBAyEAxUQcVYd3dt7jAJBtulZoz8QDftnND2X5//ittJ7XAhs=
      signature: "/kED2IJKCAyro/szRoylAwaEx3E8U2OFI8zHNB8cEHdxy8JtgoR81YL1X/o7Xzkz30eqNjIsWfhmQNdaIma2Aw=="
  UserInput:
    type: object
    description: created or last updated user input for that day
    properties:
      date:
        type: string
        format: date-time
        description: day for which the user inserted this data
      payload:
        type: object
        description: object containing key value pairs of user input
        properties:
          cervicalMucus:
            type: string
            description: |-
              cervix mucus consistance / Cervixschleimsymptom
              * keine Angabe (default) [null] * t (nichts gesehen) [t] * ∅ (nicht sichtbar) [-] * f (normale Qualität) [f] * s (sehr gute Qualität) [s] * s+ (exzellente Qualität) [s+]
            enum:
              - t
              - "-"
              - f
              - s
              - s+
          cervixPosition:
            type: string
            description: |-
              position of cervix / Muttermundstand
              * keine Angabe (default) [null] * tiefstehend [low] * hochstehend [high]
            enum:
              - low
              - high
          cervixOpenness:
            type: string
            description: |-
              is the cervix opened or closed / Muttermundöffnung
              * keine Angabe (default) [null] * geschlossen [closed] * leicht geöffnet [partlyOpen] * geöffnet [open]
            enum:
              - closed
              - partlyOpen
              - open
          cervixSoftness:
            type: string
            description: |-
              is the cervix soft or hard / Muttermundbeschaffenheit
              * keine Angabe (default) [null] * weich [soft] * hart (wie Nasenknorpel) [firm]
            enum:
              - soft
              - firm
          intercourse:
            type: boolean
            description: |-
              Geschlechtsverkehr
              * keine Angabe (default) [null] * ja [true] * nein [false]
          additionalContraceptive:
            type: boolean
            description: |-
              zusätzliche Verhütung; ONLY IF intercourse == true
              * keine Angabe (default) [null] * geschützt [true] * ungeschützt [false]
          bleedingIntensity:
            type: number
            format: float
            description: |-
              Stärke der Blutung; currently only predefined values
              * "-" (schwache Blutung) [0.2] * "o" (mittelstarke Blutung) [0.5] * + (starke Blutung) [1] * "." (Schmierblutung) [0.1]
            enum:
              - 0.1
              - 0.2
              - 0.5
              - 1
          disturbingFactors:
            type: array
            description: |-
              Störfaktoren; multiselectable; predefined values; additional values can be added when "Sonstiges" is selected, then addDisturbingFactor can be filled

              * ungewohnt spätes Zubettgehen [sleepLately]
              * ungewohnter Alkoholgenuss [alcohol]
              * Stress [stress]
              * seelische Belastung [emotionalPressure]
              * Zeitumstellung [clockChange]
              * Zeitverschiebung [timeShift]
              * kurze oder gestörte Nachtruhe[shortNight]
              * Essen spätabends [lateSupper]
              * Umgebungswechsel (Reisen, Urlaub, Klimawechsel) [changeOfEnvironment]
              * Erkrankung und Unpässlichkeiten/Fieber [fever]
              * andere Krankheit [illness]
              * Medikament [medicine]
              * Thermometerwechsel im Zyklus [changedSensor]
              * Aufregung [excitement]
              * Feiern spätabends [party]
              * Schichtarbeit [shiftWork]
              * Sonstiges [other]
            items:
              type: string
              enum:
                - sleepLately
                - alcohol
                - stress
                - emotionalPressure
                - clockChange
                - timeShift
                - shortNight
                - lateSupper
                - changeOfEnvironment
                - fever
                - illness
                - medicine
                - changedSensor
                - excitement
                - party
                - shiftWork
                - other
          addDisturbingFactor:
            type: string
            maxLength: 50
            description: free text field to add additional disturbing factor; ONLY
              IF "other" is selected in disturbingFactors
          info:
            type: string
            description: notes / Notizen
            maxLength: 500
  UserProfile:
    type: object
    description: |-
      contains all data for profile for READ access
      * user info * user specific settings * cycle statistics
    properties:
      userInfo:
        "$ref": "#/definitions/UserInfoAcceptedSigned"
      userSettings:
        "$ref": "#/definitions/UserSettingsAcceptedSigned"
      cycleStats:
        "$ref": "#/definitions/CycleStatsSigned"
  UserInfoAcceptedSigned:
    description: user info, signed by the app, accepted and signed by the server
    allOf:
      - "$ref": "#/definitions/AcceptedSignedObject"
      - type: object
        properties:
          userInfoSigned:
            "$ref": "#/definitions/UserInfoSigned"
          activeSince:
            type: string
            format: date-time
            description: timestamp when user created her trackle account; cannot be
              set by user
  UserInfoSigned:
    description: user info signed by app
    allOf:
      - "$ref": "#/definitions/SignedObject"
      - type: object
        properties:
          userInfo:
            "$ref": "#/definitions/UserInfo"
  UserInfo:
    type: object
    required:
      - email
    description: user account specific data
    properties:
      name:
        type: string
        description: display name to communicate with user in app
      email:
        type: string
        description: email address of user; currently used for user identification
  UserUpdatePassword:
    type: object
    required:
      - externalId
      - tempExternalId
    description: info needed for password change
    properties:
      externalId:
        type: string
        description: externalId of the user with the old password
      tempExternalId:
        type: string
        description: externalId of the temp user with the new password
  UserUpdateEmail:
    type: object
    required:
      - oldExternalId
      - newExternalId
    description: info needed for change of email
    properties:
      oldExternalId:
        type: string
        description: externalId of the user whose email is supposed to become changed
      newExternalId:
        type: string
        description: the new email in form of an externalId
  UserSettingsAcceptedSigned:
    description: current state of the user specific settings, signed by the app, accepted
      and signed by the server
    allOf:
      - "$ref": "#/definitions/AcceptedSignedObject"
      - type: object
        properties:
          userSettingsSigned:
            "$ref": "#/definitions/UserSettingsSigned"
  UserSettingsSigned:
    description: user settings signed by app
    allOf:
      - "$ref": "#/definitions/SignedObject"
      - type: object
        properties:
          userSettings:
            "$ref": "#/definitions/UserSettings"
  UserSettings:
    type: object
    description: user specific settings; key value pairs; can be changed by user
    additionalProperties:
      type: string
  CycleStatsSigned:
    description: cycle stats of the user signed by backend
    allOf:
      - "$ref": "#/definitions/SignedObject"
      - type: object
        properties:
          cycleStats:
            "$ref": "#/definitions/CycleStats"
  CycleStats:
    type: object
    description: statistics about users cycles analysed from collected measured temperatures
      and user inputs
    properties:
      cycle:
        type: object
        description: cycle specific statistics
        properties:
          currentNo:
            type: integer
            description: number of current cycle; start counting with cycle 0
          measuredCount:
            type: integer
            description: number of measured cycles
          avLength:
            type: number
            format: float
            description: average length of all measured cycles
          shortest:
            type: integer
            description: shortest cycle duration of all measured cycles
          longest:
            type: integer
            description: longest cycle duration of all measured cycles
      menstruation:
        type: object
        description: menstruation specific statistics
        properties:
          avLength:
            type: number
            format: float
            description: average length of all determined menstruations; determined
              from user input of bleeding intensity
          nextDate:
            type: string
            format: date-time
            description: forecast on which day the next menstruation should start;
              ends with time 00:00:00
          nextLength:
            type: integer
            description: forecast about duration of the next menstruation
      fertile:
        type: object
        description: fertility specific statistics
        properties:
          infertileDaysAtCycleBegin:
            type: number
            format: float
            description: number of infertile days at the beginning of each cycle
          avLengthFirstHalf:
            type: number
            format: float
            description: average length of the duration of cycle before ovulation
          avLengthSecondHalf:
            type: number
            format: float
            description: average length of the duration of cycle after ovulation
      ovulation:
        type: object
        description: ovulation specific statistics
        properties:
          lastConfirmed:
            type: string
            format: date-time
            description: last date for which backend determines an ovulation; ends
              with time 00:00:00
          nextDate:
            type: string
            format: date-time
            description: forecast on which day the next ovulation should happen; ends
              with time 00:00:00
          avCycleDay:
            type: number
            format: float
            description: 'average number of days of cycle after which ovulation of
              user happens '
    example:
      cycle:
        currentNo: 4
        measuredCount: 3
        avLength: 26.66
        shortest: 25
        longest: 28
      menstruation:
        avLength: 3.5
        nextDate: '2018-01-18T00:00:00.000Z'
        nextLength: 4
      fertile:
        infertileDaysAtCycleBegin: 5
        avLengthFirstHalf: 12.83
        avLengthSecondHalf: 13.78
      ovulation:
        lastConfirmed: '2017-12-20T00:00:00.000Z'
        nextDate: '2018-01-04T00:00:00.000Z'
        avCycleDay: 12.83
  TemperatureObject:
    type: object
    description: temperature value with timestamp of the measurement; can contain
      additional properties especially that this item is one of the lowest, a basal
      value, or a flag that and why this value should be ignored
    required:
      - id
      - timestamp
      - temp
    properties:
      id:
        type: string
        description: UUID of the message sent from sensor containing this temperature
          value
      deviceId:
        type: string
        description: UUID of the trackle sensor the message containing this temperature
          value was sent from
      timestamp:
        type: string
        format: date-time
        description: the timestamp of the message; when this temperature value is
          measured by the trackle sensor
      temp:
        type: number
        format: float
        description: temperature value
      basal:
        type: boolean
        default: false
        description: if true then this item is a basal value as much as to say that
          this one of the values with the lowest temperature value of the whole nicht
      ignore:
        type: boolean
        default: false
        description: if true then this item should be ignored
      ignoreComment:
        type: string
        description: if ignore = true this contains the reason why this value should
          be ignored
    example:
      id: 18ceb213-7549-4e5c-914a-8c7b6f4bcdd7
      deviceId: d971aca0-7769-401b-a402-6c42c22be847
      timestamp: '2016-06-04T23:41:58.887Z'
      temp: 36.019999999999996
      basal: true
      ignore: true
      ignoreComment: out of body
  SleepingPeriodObject:
    type: object
    required:
      - id
      - userId
      - from
      - to
      - temperatures
      - created
      - lastUpdated
    description: |-
      contains the measured temperature values of one sleeping period
      the data has been cleaned already
      - no duplicated values - no senseless values - cut off start and end values, during which the sensor isn't already in body or has not yet settled
      the data whith the basal values (minimum) are marked
    properties:
      id:
        type: string
        description: unique id of this sleeping period temperature curve; is used
          to drill down from cycle curve to sleeping period curve
      userId:
        type: string
        description: UUID of the trackle sensor this temperature values were measured
          with
      from:
        type: string
        format: date-time
        description: the timestamp of the first temperature value measured in this
          sleeping period
      to:
        type: string
        format: date-time
        description: the timestamp of the last temperature value measured in this
          sleeping period
      temperatures:
        description: |-
          all measured temperature values of the sleeping period
          - sorted by timestamp - in ascending order - with unique timestamps - intervals between timestamps do not need to be equal - basal values (minimum) are marked
        type: array
        items:
          "$ref": "#/definitions/TemperatureObject"
      created:
        type: string
        format: date-time
        description: when this sleeping period had been created
      lastUpdated:
        type: string
        format: date-time
        description: when this sleeping period had been last updated
    example:
      id: fb8bce6a-d7cb-4288-9aee-04ca627ab364
      userId: d971aca0-7769-401b-a402-6c42c22be847
      from: '2016-06-04T23:41:58.887Z'
      to: '2016-06-05T08:27:24.413Z'
      temperatures:
        - id: 18ceb213-7549-4e5c-914a-8c7b6f4bcdd7
          deviceId: d971aca0-7769-401b-a402-6c42c22be847
          timestamp: '2016-06-04T23:42:56.323Z'
          temperature: 35.2
          ignore: true
          ignoreComment: out of body
        - id: 1291b73e-bb7c-440c-a93b-9d75f3bcdb1c
          deviceId: d971aca0-7769-401b-a402-6c42c22be847
          timestamp: '2016-06-04T23:41:58.887Z'
          temp: 36.019999999999996
          basal: true
        - id: d90ee0a6-e7b6-45c6-bf59-028d960bdeec
          deviceId: d971aca0-7769-401b-a402-6c42c22be847
          timestamp: '2016-06-04T23:43:53.776Z'
          temperature: 36.25
      created: '2016-06-04T23:41:58.837Z'
      lastUpdated: '2016-06-05T08:27:24.463Z'
  HealthResponse200:
    description: response if server is healthy
    type: object
    required:
      - version
      - status
      - message
    properties:
      version:
        type: string
      status:
        type: string
        enum:
          - OK
          - NOK
      message:
        type: string
        description: welcome string with build information ( $GO_PIPELINE_NAME / $GO_PIPELINE_LABEL
          / $GO_PIPELINE_REVISION )
    example:
      version: '1.0'
      status: OK
      message: Welcome to the ubirchTrackleService ( BUILD_trackle-service / 79 /
        noRev )
  DeepCheckHealthResponse200:
    description: response of deep check if server is healthy
    type: object
    required:
      - status
      - message
    properties:
      status:
        type: string
        enum:
          - true
          - false
      message:
        type: array
        items:
          type: string
        description: array with all errors that occurred
    example:
      status: true
      message: []
  DeepCheckHealthResponse500:
    allOf:
      - "$ref": "#/definitions/DeepCheckHealthResponse200"
    example:
      status: false
      message:
        - unable to connect to the database
  ErrorResponse:
    description: default error object with error code and message
    allOf:
      - "$ref": "#/definitions/ErrorResponseObject"
      - type: object
        properties:
          error:
            type: object
            properties:
              errorId:
                type: string
                enum:
                  - ErrorTimeOut
                  - ErrorNotHandled
                  - ErrorFatalIntern
                  - ErrorMissingParams
                  - ErrorParseJson
                  - ErrorInvalidSignature
              errorMessage:
                type: string
                enum:
                  - request could not be processed in time
                  - request could not be handled
                  - fatal internal error
                  - missing parameters
                  - cannot parse incoming json doc
                  - Verification of signature failed
  TrackleError:
    description: trackle error response based on default ubirch error object
    type: object
    properties:
      version:
        type: string
        enum:
          - '1.0'
      status:
        type: string
        enum:
          - OK
          - NOK
      errorType:
        type: string
      errorMessage:
        type: string
        enum:
          - ServerError
          - RegistrationError
          - ValidationError
  ServerError:
    allOf:
      - "$ref": "#/definitions/TrackleError"
    example:
      version: '1.0'
      status: NOK
      errorType: ServerError
      message: message from most likely an exception
  CheckEmailError:
    allOf:
      - "$ref": "#/definitions/TrackleError"
    example:
      version: '1.0'
      status: NOK
      errorType: ValidationError
      message: externalId does not exist
  UbirchJsonResponse:
    description: standard ubirch JSON response
    type: object
    properties:
      version:
        type: string
        enum:
          - '1.0'
      status:
        type: string
        enum:
          - OK
      message:
        type: string
  CheckEmailExists:
    allOf:
      - "$ref": "#/definitions/UbirchJsonResponse"
    example:
      version: '1.0'
      status: OK
      message: externalId exists
